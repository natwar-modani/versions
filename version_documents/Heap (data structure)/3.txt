thumb|right|240px|example of a full binary max heap

in computer science, a heap is a specialized tree-based data structure that satisfies the heap property: if b is a child node of a, then key(a) ≥ key(b).  this implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max-heap. (alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min-heap.) the several variants of heaps are the prototypical most efficient implementations  of the abstract data type  priority queues. priority queues are useful in many applications. in particular, heaps are crucial in several efficient graph algorithms.

the operations commonly performed with a heap are
 delete-max or delete-min: removing the root node of a max- or min-heap, respectively
 increase-key or decrease-key: updating a key within a max- or min-heap, respectively
 insert: adding a new key to the heap
 merge: joining two heaps to form a valid new heap containing all the elements of both.

heaps are used in the sorting algorithm heapsort.

variants

 2-3 heap
 beap
 binary heap
 binomial heap
 d-ary heap
 fibonacci heap
 leftist heap
 pairing heap
 skew heap
 soft heap
 ternary heap
 treap

comparison of theoretic bounds for variants

the following time complexitiesthomas h. cormen, charles e. leiserson, ronald l. rivest (1990): introduction to algorithms.
mit press / mcgraw-hill. are worst-case time for binary and binomial heaps and amortized time complexity for fibonacci heap. o(f) gives asymptotic upper bound and θ(f) is asymptotically tight bound (see big o notation). function names assume a min-heap.

 operation  binary binomial  fibonacci findmin  θ(1) θ(log n) or θ(1) θ(1) deletemin  θ(log n) θ(log n) o(log n) insert  θ(log n) o(log n) θ(1) decreasekey  θ(log n) θ(log n) θ(1) merge θ(n) o(log n) θ(1)

for pairing heaps the insert and merge operations are conjectured  to be o(1) amortized complexity but this has not yet been proven. decreasekey is not o(1) amortized complexity.

heap applications
the heap data structure has many applications.
 heapsort: one of the best sorting methods being in-place and with no quadratic worst-case scenarios.
 selection algorithms: finding the min, max, both the min and max, median, or even the k-th largest element can be done in linear time using heaps.
 graph algorithms: by using heaps as internal traversal data structures, run time will be reduced by an order of polynomial. examples of such problems are prim's minimal spanning tree algorithm and dijkstra's shortest path problem.

interestingly, full and almost full binary heaps may be represented in a very space-efficient way using an array alone. the first (or last) element will contain the root. the next two elements of the array contain its children. the next four contain the four children of the two child nodes, etc. thus the children of the node at position n would be at positions 2n and 2n+1 in a one-based array, or 2n+1 and 2n+2 in a zero-based array. this allows moving up or down the tree by doing simple index computations. balancing a heap is done by swapping elements which are out of order. as we can build a heap from an array without requiring extra memory (for the nodes, for example), heapsort can be used to sort an array in-place.

one more advantage of heaps over trees in some applications is that construction of heaps can be done in linear time using tarjan's algorithm.

heap implementations
the c++ standard template library provides the make_heap, push_heap and pop_heap algorithms for binary heaps, which operate on arbitrary random access iterators.  it treats the iterators as a reference to an array, and uses the array-to-heap conversion detailed above.
 the java 2 platform (since version 1.5) provides the binary heap implementation with class java.util.priorityqueue<e> in java collections framework.
 python has a heapq module that implements a priority queue using heap.
 php has both maxheap (splmaxheap) and minheap (splminheap) as of version 5.3 in the standard php library.
 perl has implementations of binary, binomial, and fibonacci heaps in the heap distribution available on cpan

